name: Build APK with Buildozer

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 33
          build-tools: 33.0.2
          ndk: 25.2.9519653
          
      - name: Accept Android licenses
        run: yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
        
      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            ccache \
            libncurses6 \
            libstdc++6 \
            zlib1g-dev \
            libffi-dev \
            libssl-dev \
            libsqlite3-dev \
            libjpeg-dev \
            unzip \
            python3-pip \
            wget \
            git \
            autoconf \
            automake \
            libtool \
            pkg-config
            
      - name: Install Buildozer and dependencies
        run: |
          pip install --upgrade pip
          pip install buildozer cython
          
      - name: Cache Buildozer global directory
        uses: actions/cache@v3
        with:
          path: ~/.buildozer
          key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            buildozer-${{ runner.os }}-
            
      - name: Cache Buildozer dependencies
        uses: actions/cache@v3
        with:
          path: .buildozer
          key: buildozer-deps-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            buildozer-deps-${{ runner.os }}-
            
      - name: Create Android repositories config
        run: |
          mkdir -p $HOME/.android
          touch $HOME/.android/repositories.cfg
          
      - name: Initialize Buildozer
        run: |
          if [ ! -f buildozer.spec ]; then
            buildozer init
          fi
          
      - name: Configure Buildozer spec
        run: |
          # Modifier buildozer.spec pour utiliser les bonnes versions et chemins
          cat >> buildozer.spec << EOF
          
          # Configuration Android
          android.api = 33
          android.minapi = 21
          android.ndk = 25b
          android.sdk = 33
          android.accept_sdk_license = True
          
          # Chemin personnalisé pour le SDK (utilise celui configuré par l'action)
          android.sdk_path = $ANDROID_SDK_ROOT
          android.ndk_path = $ANDROID_NDK_ROOT
          EOF
          
      - name: Debug SDK setup
        run: |
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          echo "PATH: $PATH"
          echo "Contenu de ANDROID_SDK_ROOT:"
          ls -la $ANDROID_SDK_ROOT || echo "ANDROID_SDK_ROOT non trouvé"
          echo "Recherche de sdkmanager:"
          find $ANDROID_SDK_ROOT -name "sdkmanager" -type f 2>/dev/null || echo "sdkmanager non trouvé"
          
      - name: Build APK
        run: |
          export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools
          buildozer android debug
          
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mobilemoney-apk
          path: bin/*.apk
          if-no-files-found: error
          
      - name: List generated files (debug)
        if: always()
        run: |
          echo "Contenu du répertoire bin:"
          ls -la bin/ || echo "Le répertoire bin n'existe pas"
          echo "Structure du projet:"
          find . -name "*.apk" -type f
