name: Build APK with Buildozer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip \
          openjdk-11-jdk \
          python3-pip \
          autoconf libtool pkg-config \
          zlib1g-dev \
          libncurses5-dev libncursesw5-dev \
          cmake \
          libffi-dev libssl-dev \
          ninja-build

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython==0.29.19 virtualenv

    - name: Cache build dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.buildozer
          ~/.gradle
          ~/.android
        key: build-cache-${{ runner.os }}

    - name: Build APK
      run: |
        export GRADLE_OPTS="-Xmx2048m -Dorg.gradle.daemon=false"
        buildozer -v android debug
        cp bin/*.apk .

    - name: Find APK file
      run: |
        echo "APK files in bin/:"
        ls -la bin/*.apk || echo "No APK found"
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: App-APK
        path: bin/*.apk
        if: success()
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        files: bin/*.apk
        tag_name: v1.0.${{ github.run_number }}
        body: |-
          Version automatique
          Build: ${{ github.run_number }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
